


----------------------------------------------------------------
 todo-app
 ----------------------------------------------------------------
 
 	application
 	
 			=> console based java application
 			
    datasource
    
    		=> SQL datasource e.g MySQL
    		
----------------------------------------------------------------    					

user

	- userId
	- name
	


todo

	- id : int
	- title : string
	- completed : boolean
	- user_id    

---------------------------------------------------------------- 	



Application

	-> object model
	
	
SQL-database

	-> relational model	
	
   
   ==> ORM ( Object Relational Mapping )
   
   
   
how to do ?
  
  
    ==> using JDBC api  ( java.sql.* )
  
   
----------------------------------------------------------------


how to use JDBC-api ?


step-1 : register/install 'jdbc-driver' with jdbc-api

step-2 : create db-connection with URL,username and Password

step-3 : create jdbc-statements with SQL

step-4 : excute jdbc-statements & process result-set

step-5 : handle SQLException

step-6 : Manage Transactions i.e commit | rollback

step-7 : close connection

-------------------------------------------------------------------	 	






design patterns
-------------------


1. DAO ( Data Access Object ) / Repository  pattern
	
	
		  		
	   why we need this pattern ,
	   
	   => To isolate data accessing operation from regular code	 
	   
	   adv
	   
	   ==> able to re-use data access functionality in different parts of appln.  		

	
	
	 	  e.g 
	 	  
	 	  -Todo
	 	  		TodoDAO / TodoRepository
	 	  -User
	 	  		UserDAO / UserRepositor		
	 



2. Factory design 


	why we need this pattern ,
	
	=> to centralize/isolate complex obj construction code.


	e.g ConnectionFactory
	
	
	
